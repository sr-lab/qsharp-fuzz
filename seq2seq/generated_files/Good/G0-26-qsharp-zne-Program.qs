namespace qsharp_zne { open Microsoft.Quantum.Canon; open Microsoft.Quantum.Intrinsic; open Microsoft.Quantum.Measurement; open Microsoft.Quantum.Math; open Microsoft.Quantum.Arrays; open Microsoft.Quantum.Diagnostics; open Microsoft.Quantum.Characterization; @EntryPoint() operation RunZNE(scaleFactor : Int, numQubits : Int) : Double { let initialOperation = ApplyToEachCA(H,_); let oracle = CalculateExpectedValue(initialOperation, _, numQubits); let results = ForEach(oracle, [1, 2, 3, 4, 5]); return 0.0; } operation CalculateExpectedValue( op: (Qubit[] => Unit is Adj), scaleFactor : Int, numQubits : Int) : Double { return EstimateFrequency(GlobalFold(op, scaleFactor), Measure((ConstantArray(numQubits, PauliI) w/ 0 <- PauliZ),_), numQubits, 10); } operation ApplyTest(target : Qubit[]) : Unit is Adj + Ctl { H(target[0]); } function GlobalFold(op : (Qubit[]=>Unit is Adj), scaleFactor : Int) : (Qubit[]=>Unit is Adj) { let numPairs = (scaleFactor - 1) / 2; let foldedOperationArray = [op] + Flattened(ConstantArray(numPairs, [op, Adjoint(op)])); return (BoundA(foldedOperationArray)); } } 