 namespace Microsoft.Quantum.Testing.QIR{ newtype CustomTuple = (Data : Double[]); function DrawRandom(arg : Double[]) : Int { body intrinsic; } function ReturnInt(arg : CustomTuple) : Int { if Drandom number between 0 and {mutable bitForAlice( bit : Bool, qubit : Qubit) : Result { if( bit ) { Ry(PI() / 4.0, qubit); } else { return 0; } } function ReturnFromNested(branch1 : Bool, branch2 : Bool) : Int { if branch1 { if branch2 { return 1; } else { return 2; } } else { if branch2 { return 3; } else { return 4; } } } function TestConditions(input : String, arr : Int[]) : Int { if input == "true" { let _ = true; } elif input == "false" { let _ = false; } elif Length(arr) > 0 { let _ = false; } return Length(arr); } function Hello(withPunctuation : Bool) : String[] { let arr = ["Hello","World", ""]; return withPunctuation ? arr | (arr w/ 2 <- "!"); } @EntryPoint() operation TestConditional (arg : Double[]) : Int { let _ = Hello(true); let _ = ReturnFromNested(true, false); let _ = TestConditions("", []); let result = ReturnInt(CustomTuple([3.])); return result; } } 